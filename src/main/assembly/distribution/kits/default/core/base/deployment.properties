# ServiceBox system base bundles

# Choose the name for this location, or remove it to use the file system
# location.
#
# Note that the location should be unique and determine the bundle source to be
# bound with the installed bundles. The example below is used for the base that
# ServiceBox provides and should be used for the same purpose only.
#
# The 'location' scheme refers to no physical location, it serves as a symbolic
# reference in the URI form.
#
bundle.location.root=location://net.yetamine/servicebox/base

# It is usually better to allow installation and uninstallation, so that an
# update of the bundle source is reflected during the deploy phase. However,
# it counts with unique file names, so that a change can be detected easily.
# For non-unique file names, e.g., snapshot builds, include 'update' as well to
# force the update always.
#
deployment.action=install, uninstall

# This filter allows only .jar files in this directory. It is better to have
# flat directory structure for a bundle source, with as few files as possible,
# so that listing the directory takes less time.
#
deployment.search=*.jar

# Bundle sources that provide support for other bundles should declare a lower
# start level than the supported bundles. Especially very low-level services
# might require starting early in order to work reliably (e.g., when using a
# weaving hook).
#
# ServiceBox uses following convention for start levels:
#
#    1 - 29     system base
#   30 - 79     system middleware
#   80 - 99     application middleware and support
#   100+        application business functionality
#
# It is recommended to set the default start level to 100 and set the framework
# start level to the same value, so that bundle sources without any deployment
# properties are deployed when all really important system parts are running.
#
start.level=20

# Adjust the start level for the specific bundles to reduce undesired effects.
#
# Using wildcards mitigates the need of updating this file as the wildcards can
# cover version upgrades and minor additions.

# Pure Java libraries, mostly JEE/EE4J
start.level@javax.*.jar=1

# OSGi utility libraries
start.level@org.osgi.util.*.jar=2

# Here starts the real services. Logging should start first, so that following
# bundles can use logging system which is under some control already and not a
# default that the framework might provide, which could spill messages to the
# console for instance.
start.level@pax-logging-*.jar=4

# Still quite low-level services close to the OSGi Core API
start.level@org.apache.felix.configadmin-*.jar=8
start.level@org.apache.felix.configurator-*.jar=8
start.level@org.apache.felix.coordinator-*.jar=8
start.level@org.apache.felix.eventadmin-*.jar=8

# Declarative Services and friends providing high-level service support
start.level@org.apache.felix.metatype-*.jar=15
start.level@org.apache.felix.scr-*.jar=15
